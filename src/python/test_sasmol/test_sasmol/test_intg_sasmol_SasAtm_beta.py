'''
    SASMOL: Copyright (C) 2011 Joseph E. Curtis, Ph.D. 

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''

from sasmol.test_sasmol.util import env, util

from unittest import main 
from mocker import Mocker, MockerTestCase, ANY, ARGS, KWARGS

import sasmol.sasmol as sasmol
import numpy

import os

DataPath = os.path.join(os.path.dirname(os.path.realpath(__file__)),'..','data','sasmol','sasmol')+os.path.sep

class Test_intg_sasmol_SasAtm_beta(MockerTestCase):

   maxDiff = None

   def setUp(self):
      self.o=sasmol.SasAtm(3,'1CRN-3frames.pdb')


   def test_1CRN_3frames(self):
      '''
	   test a regular pdb file with 3 frame
	   '''
      #
      expected = ['13.79', '10.80', '9.19', '9.85', '13.02', '15.06', '14.23', '7.81', '8.31', '5.80', '6.94', '10.32', '12.81', '11.90', '5.24', '5.39', '4.45', '6.54', '5.99', '7.01', '3.90', '4.24', '3.72', '5.30', '4.41', '4.72', '3.96', '4.25', '4.96', '7.44', '5.11', '5.24', '5.20', '4.83', '4.45', '4.99', '4.61', '5.05', '6.39', '4.94', '6.33', '5.32', '6.85', '8.43', '9.78', '11.70', '9.92', '5.02', '6.93', '5.39', '6.30', '9.64', '13.85', '11.97', '3.73', '3.56', '4.13', '4.36', '4.80', '3.73', '3.38', '3.47', '4.67', '3.95', '4.55', '5.89', '6.20', '7.52', '10.68', '9.48', '5.19', '4.60', '4.84', '5.84', '5.91', '8.38', '3.54', '4.57', '4.14', '5.52', '6.42', '8.25', '12.72', '9.92', '3.43', '3.49', '3.40', '4.07', '5.48', '5.57', '6.99', '6.52', '8.20', '6.34', '6.84', '3.64', '4.31', '3.98', '6.22', '5.81', '6.82', '9.43', '8.21', '3.76', '3.98', '3.80', '4.85', '4.71', '6.67', '6.26', '3.79', '3.54', '3.48', '4.63', '4.58', '5.66', '3.99', '3.83', '3.79', '5.39', '4.11', '4.69', '5.10', '4.71', '5.28', '6.67', '6.41', '4.70', '5.46', '5.13', '5.55', '6.47', '7.43', '8.70', '9.39', '4.28', '5.38', '6.30', '9.62', '5.87', '6.47', '6.45', '4.94', '5.39', '5.03', '7.34', '4.10', '3.94', '3.96', '5.82', '4.13', '5.45', '5.41', '5.04', '4.69', '4.19', '4.47', '7.12', '7.03', '4.90', '5.16', '5.31', '4.11', '5.11', '6.16', '7.48', '9.40', '10.40', '13.32', '4.56', '4.49', '4.10', '5.64', '5.80', '4.37', '5.44', '4.32', '4.72', '6.42', '7.50', '7.65', '7.80', '3.92', '4.37', '3.95', '4.74', '4.63', '5.61', '3.89', '4.43', '4.26', '5.44', '5.36', '4.53', '5.08', '4.62', '7.80', '6.03', '7.19', '7.34', '5.01', '6.60', '4.92', '7.13', '9.66', '11.56', '12.85', '14.44', '16.61', '17.11', '19.99', '28.98', '5.31', '5.70', '6.28', '8.77', '6.55', '6.57', '7.29', '4.99', '5.50', '4.19', '6.12', '4.30', '4.89', '5.50', '5.82', '4.66', '5.33', '6.02', '5.24', '5.16', '7.19', '5.49', '6.85', '6.45', '8.94', '5.52', '6.82', '6.92', '9.22', '8.11', '9.59', '9.73', '13.41', '7.06', '7.52', '6.63', '7.90', '8.07', '9.41', '9.46', '9.85', '8.07', '8.78', '8.31', '9.09', '9.67', '10.15', '9.53', '8.48', '9.20', '10.41', '12.06', '9.24', '9.24', '9.60', '13.65', '10.43', '8.70', '9.46', '8.32', '9.89', '10.72', '11.66', '11.81', '7.64', '8.05', '7.63', '9.64', '7.80', '7.30', '8.00', '8.96', '9.06', '8.82', '10.39', '10.99', '10.49', '7.55', '8.00', '7.22', '8.41', '5.54', '5.85', '5.87', '7.29', '6.72', '8.59', '9.59', '11.45', '5.22', '5.56', '4.61', '6.04', '5.41', '5.34', '6.59', '5.94', '5.97', '5.17', '5.96', '8.60', '4.76', '5.89', '6.67', '7.56', '6.82', '5.80', '6.15', '6.61', '7.18', '7.27', '7.98', '11.00', '10.32', '7.86']
      expected = numpy.array(expected, numpy.float32)
      #
      self.o.read_pdb(DataPath+'1CRN-3frames.pdb')
      #
      result = self.o.beta()
      #
      #self.assertEqual(expected, result)
      self.assertTrue((expected == result).all())

   def tearDown(self):
      pass
        
   
   
if __name__ == '__main__': 
   main() 

